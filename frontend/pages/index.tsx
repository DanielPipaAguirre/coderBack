import { useEffect, useState } from "react";
import type { NextPage } from "next";
import axios from "axios";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";

import ProductCard from "../components/ProductCard/ProductCard";
import { Product } from "../components/ProductCard/ProductCard.types";
import Modal from "../components/Modal/Modal";
import ProductForm from "../components/ProductForm/ProductForm";
import ShoppingCartProduct from "../components/ShoppingCartProduct/ShoppingCartProduct";

const apiProductUrl = "http://localhost:8080/api/productos";
const apiCartUrl = "http://localhost:8080/api/carrito";

const Home: NextPage = () => {
    const [products, setProducts] = useState<Product[]>();
    const [showModal, setShowModal] = useState(false);
    const [selectedProduct, setSelectedProduct] = useState<Product>();
    const { nombre } = selectedProduct ?? {};
    const [openCart, setOpenCart] = useState(false);
    const [shoppingCartId, setShoppingCartId] = useState<number>();
    const [cartProducts, setCartProducts] = useState<Product[]>();
    const [cartLenght, setCartLenght] = useState(0);

    const deleteProduct = (id: number) => {
        axios.delete(`${apiProductUrl}/${id}`).then(() => {
            setProducts((prev) => {
                return prev?.filter((product) => product.id !== id);
            });
        });
    };

    const editProduct = (product: Product) => {
        setSelectedProduct(product);
        setShowModal(true);
    };

    const onUpdate = (product: Product) => {
        const { id } = product;
        setProducts((prev) => {
            if (!prev) return [];
            let newProducts = prev;
            const index = prev?.findIndex((product) => product.id === id);
            const newProduct = { ...product, id };
            newProducts[index] = newProduct;
            setShowModal(false);
            return newProducts;
        });
    };

    const deleteProductCart = (id: number, productId: number) => {
        axios.delete(`${apiCartUrl}/${id}/productos/${productId}`).then(() => {
            console.log("Producto eliminado!", productId);
            setCartProducts((prev) => {
                return prev?.filter((product) => product.id !== productId);
            });
        });
    };

    const addProduct = (product: Product) => {
        axios
            .post(`${apiCartUrl}/${shoppingCartId}/productos`, product, {
                headers: { "Content-Type": "application/json" },
            })
            .then((response) => {
                setOpenCart(true);
                setCartLenght((prev) => prev + 1);
                console.log("agregado al carrito!", response.data);
            })
            .catch((e) => console.error(e.message));
    };

    const emptyCart = (id: number) => {
        axios.delete(`${apiCartUrl}/${id}`).then(() => {
            console.log("Carrito eliminado!", id);
            setCartProducts(undefined);
        });
    };

    useEffect(() => {
        axios.get(apiProductUrl).then((response) => {
            setProducts(response.data);
        });
    }, []);

    useEffect(() => {
        if (!shoppingCartId) return;
        axios
            .get(`${apiCartUrl}/${shoppingCartId}/productos`)
            .then((response) => {
                console.log("Productos!", response.data);
                setCartProducts(response.data);
            })
            .catch((e) => console.error(e.message));
    }, [shoppingCartId, cartLenght]);

    useEffect(() => {
        if (shoppingCartId) return;
        axios.post(apiCartUrl).then((response) => {
            const { carrito } = response.data;
            console.log("Carrito creado!", response.data);
            setShoppingCartId(carrito.id);
        });
    }, [shoppingCartId]);

    return (
        <div className="Home">
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className="Home__navbar">
                <div className="Home__logo">Tienda</div>
                <Link href="/admin">
                    <a>Agregar productos</a>
                </Link>
                <Image
                    className="Home__cart"
                    src="https://www.svgrepo.com/show/310613/cart.svg"
                    width={20}
                    alt="carrito"
                    height={20}
                    onClick={() => setOpenCart((prev) => !prev)}
                />
                {openCart &&
                cartProducts &&
                shoppingCartId &&
                cartProducts.length ? (
                    <div className="Home__shoppingCart">
                        <button onClick={() => emptyCart(shoppingCartId)}>
                            Vaciar carrito
                        </button>
                        {cartProducts?.map((product, index) => {
                            const { id } = product;
                            return (
                                <div
                                    key={`${id}-${index}`}
                                    className="Home__cartItem"
                                >
                                    <ShoppingCartProduct
                                        product={product}
                                        key={id}
                                        onDelete={() =>
                                            deleteProductCart(
                                                shoppingCartId,
                                                id
                                            )
                                        }
                                    />
                                </div>
                            );
                        })}
                    </div>
                ) : null}
            </div>
            <main className="Home__main">
                {products?.map((product) => {
                    const { id } = product;
                    return (
                        <ProductCard
                            product={product}
                            key={id}
                            onDelete={() => deleteProduct(id)}
                            onEdit={() => editProduct(product)}
                            onAdd={() => addProduct(product)}
                        />
                    );
                })}
            </main>
            <Modal
                onClose={() => setShowModal(false)}
                show={showModal}
                title={nombre}
            >
                <ProductForm
                    method="UPDATE"
                    initialValues={selectedProduct}
                    onUpdate={onUpdate}
                />
            </Modal>
        </div>
    );
};

export default Home;
